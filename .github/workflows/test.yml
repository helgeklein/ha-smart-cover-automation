name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions: {}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-test.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-test.txt

      - name: Run tests
        run: |
          python -m pytest -n auto tests/ -o addopts="--strict-markers --strict-config --cov=custom_components.smart_cover_automation --cov-report=term-missing --cov-report=xml --cov-fail-under=80"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
          cache: pip

      - name: Test integration loading
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'custom_components')
          from smart_cover_automation import const
          print(f'Integration {const.DOMAIN} module loaded successfully')
          print(f'Logger: {const.LOGGER.name}')
          "

      - name: Validate manifest
        run: |
          python -c "
          import json
          with open('custom_components/smart_cover_automation/manifest.json') as f:
              manifest = json.load(f)
          required_keys = ['domain', 'name', 'version', 'documentation', 'issue_tracker']
          for key in required_keys:
              assert key in manifest, f'Missing required key: {key}'
          print('Manifest validation passed')
          "
