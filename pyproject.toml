[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=custom_components.smart_cover_automation",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
log_cli = false
log_level = "ERROR"
markers = [
    "asyncio: marks tests as async",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["custom_components/smart_cover_automation"]
omit = [
    "tests/*",
    "*/tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true

[tool.ruff]
target-version = "py313"
line-length = 140

[tool.ruff.lint]
# Only enable essential rules (no extended plugins)
select = ["E4", "E7", "E9", "F", "I"]
ignore = [
    "E501", # line too long handled by formatter/tests
]

# Per-file configuration for test files
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # assert in tests
    "SLF001",  # private-member-access in tests
    "PLR2004", # magic values in tests
    "B023",    # lambda loop variable capture
    "TRY003",  # long exception messages
    "TRY301",  # abstract raise to inner function
    "EM101",   # string literal in exception
    "EM102",   # f-string in exception
    "SIM102",  # collapsible if
    "TC003",   # type-checking import placement
]
